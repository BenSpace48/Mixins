// *** Simple grid mixin ***

// Works out the correct width and margin based on how many items in a row and the size of the margin
// In this example we want 4 items in a row, seperated by a margin of 3%
//
//
// ***** USAGE//EXAMPLE *****
//
//
// @include grid-width(#, #);
// first # = how many items in a row
// second # = the size of required margin (in percentage)
//
// Enter margins as percentages, but don't include the percentage symbol
//
// .my-element {
//     @include grid-width(4,3);
// }
//
//This would compile to:
// .my-element {
//    float: left;
//     margin-right: 3%;
//     width: 22.75%;
// }
//
// .my-element:nth-child(4n+4) {
//     margin-right: 0;
// }
//
//

@function grid-margin-percentage($number-of-items-in-row, $margin-size) {
    @return ($number-of-items-in-row - 1) * $margin-size;
}

@function grid-item-width-percentage($number-of-items-in-row, $margin-size) {
    @return ($margin-size / $number-of-items-in-row);
}


@mixin grid-width($number-of-items-in-row, $margin-size) {
    width: percentage(((100 / $number-of-items-in-row) - $margin-size) / 100) + grid-item-width-percentage($number-of-items-in-row, $margin-size);
    margin-right: percentage($margin-size / 100);
    float: left;
    
    &:nth-child(#{$number-of-items-in-row}n + #{$number-of-items-in-row}) {
        margin-right: 0;
    }
}

.test {
    padding: 10px;
}